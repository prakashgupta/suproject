// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_player_2eproto__INCLUDED
#define PROTOBUF_player_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_player_2eproto();
void protobuf_BuildDesc_player_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Player;

// ===================================================================

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();
  
  Player(const Player& from);
  
  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();
  void Swap(Player* other);
  
  // implements Message ----------------------------------------------
  
  Player* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string nick = 2;
  inline bool has_nick() const;
  inline void clear_nick();
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline ::std::string* mutable_nick();
  
  // optional bytes ipaddress = 3;
  inline bool has_ipaddress() const;
  inline void clear_ipaddress();
  inline const ::std::string& ipaddress() const;
  inline void set_ipaddress(const ::std::string& value);
  inline void set_ipaddress(const char* value);
  inline void set_ipaddress(const void* value, size_t size);
  inline ::std::string* mutable_ipaddress();
  
  // optional bytes position = 4;
  inline bool has_position() const;
  inline void clear_position();
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const void* value, size_t size);
  inline ::std::string* mutable_position();
  
  // optional bytes rotation = 5;
  inline bool has_rotation() const;
  inline void clear_rotation();
  inline const ::std::string& rotation() const;
  inline void set_rotation(const ::std::string& value);
  inline void set_rotation(const char* value);
  inline void set_rotation(const void* value, size_t size);
  inline ::std::string* mutable_rotation();
  
  // optional bytes target = 6;
  inline bool has_target() const;
  inline void clear_target();
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const void* value, size_t size);
  inline ::std::string* mutable_target();
  
  // optional string text = 7;
  inline bool has_text() const;
  inline void clear_text();
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline ::std::string* mutable_text();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* nick_;
  static const ::std::string _default_nick_;
  ::std::string* ipaddress_;
  static const ::std::string _default_ipaddress_;
  ::std::string* position_;
  static const ::std::string _default_position_;
  ::std::string* rotation_;
  static const ::std::string _default_rotation_;
  ::std::string* target_;
  static const ::std::string _default_target_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  friend void protobuf_BuildDesc_player_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Player

// required int32 id = 1;
inline bool Player::has_id() const {
  return _has_bit(0);
}
inline void Player::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Player::id() const {
  return id_;
}
inline void Player::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string nick = 2;
inline bool Player::has_nick() const {
  return _has_bit(1);
}
inline void Player::clear_nick() {
  if (nick_ != &_default_nick_) {
    nick_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Player::nick() const {
  return *nick_;
}
inline void Player::set_nick(const ::std::string& value) {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void Player::set_nick(const char* value) {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline ::std::string* Player::mutable_nick() {
  _set_bit(1);
  if (nick_ == &_default_nick_) {
    nick_ = new ::std::string;
  }
  return nick_;
}

// optional bytes ipaddress = 3;
inline bool Player::has_ipaddress() const {
  return _has_bit(2);
}
inline void Player::clear_ipaddress() {
  if (ipaddress_ != &_default_ipaddress_) {
    ipaddress_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Player::ipaddress() const {
  return *ipaddress_;
}
inline void Player::set_ipaddress(const ::std::string& value) {
  _set_bit(2);
  if (ipaddress_ == &_default_ipaddress_) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void Player::set_ipaddress(const char* value) {
  _set_bit(2);
  if (ipaddress_ == &_default_ipaddress_) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(value);
}
inline void Player::set_ipaddress(const void* value, size_t size) {
  _set_bit(2);
  if (ipaddress_ == &_default_ipaddress_) {
    ipaddress_ = new ::std::string;
  }
  ipaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_ipaddress() {
  _set_bit(2);
  if (ipaddress_ == &_default_ipaddress_) {
    ipaddress_ = new ::std::string;
  }
  return ipaddress_;
}

// optional bytes position = 4;
inline bool Player::has_position() const {
  return _has_bit(3);
}
inline void Player::clear_position() {
  if (position_ != &_default_position_) {
    position_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Player::position() const {
  return *position_;
}
inline void Player::set_position(const ::std::string& value) {
  _set_bit(3);
  if (position_ == &_default_position_) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void Player::set_position(const char* value) {
  _set_bit(3);
  if (position_ == &_default_position_) {
    position_ = new ::std::string;
  }
  position_->assign(value);
}
inline void Player::set_position(const void* value, size_t size) {
  _set_bit(3);
  if (position_ == &_default_position_) {
    position_ = new ::std::string;
  }
  position_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_position() {
  _set_bit(3);
  if (position_ == &_default_position_) {
    position_ = new ::std::string;
  }
  return position_;
}

// optional bytes rotation = 5;
inline bool Player::has_rotation() const {
  return _has_bit(4);
}
inline void Player::clear_rotation() {
  if (rotation_ != &_default_rotation_) {
    rotation_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Player::rotation() const {
  return *rotation_;
}
inline void Player::set_rotation(const ::std::string& value) {
  _set_bit(4);
  if (rotation_ == &_default_rotation_) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(value);
}
inline void Player::set_rotation(const char* value) {
  _set_bit(4);
  if (rotation_ == &_default_rotation_) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(value);
}
inline void Player::set_rotation(const void* value, size_t size) {
  _set_bit(4);
  if (rotation_ == &_default_rotation_) {
    rotation_ = new ::std::string;
  }
  rotation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_rotation() {
  _set_bit(4);
  if (rotation_ == &_default_rotation_) {
    rotation_ = new ::std::string;
  }
  return rotation_;
}

// optional bytes target = 6;
inline bool Player::has_target() const {
  return _has_bit(5);
}
inline void Player::clear_target() {
  if (target_ != &_default_target_) {
    target_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Player::target() const {
  return *target_;
}
inline void Player::set_target(const ::std::string& value) {
  _set_bit(5);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Player::set_target(const char* value) {
  _set_bit(5);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void Player::set_target(const void* value, size_t size) {
  _set_bit(5);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_target() {
  _set_bit(5);
  if (target_ == &_default_target_) {
    target_ = new ::std::string;
  }
  return target_;
}

// optional string text = 7;
inline bool Player::has_text() const {
  return _has_bit(6);
}
inline void Player::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Player::text() const {
  return *text_;
}
inline void Player::set_text(const ::std::string& value) {
  _set_bit(6);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Player::set_text(const char* value) {
  _set_bit(6);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline ::std::string* Player::mutable_text() {
  _set_bit(6);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

#endif  // PROTOBUF_player_2eproto__INCLUDED
